// nfteseum-api v0.0.1 9e05f01b91f92696612279f042463c2f2b2a7b2a
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/javascript
// Do not edit by hand. Update your webrpc schema and re-generate.

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.0.1"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "9e05f01b91f92696612279f042463c2f2b2a7b2a"


//
// Types
//

export class Version {
  constructor(_data) {
    this._data = {}
    if (_data) {
      this._data['webrpcVersion'] = _data['webrpcVersion']
      this._data['schemaVersion'] = _data['schemaVersion']
      this._data['schemaHash'] = _data['schemaHash']
      this._data['appVersion'] = _data['appVersion']
      
    }
  }
  get webrpcVersion() {
    return this._data['webrpcVersion']
  }
  set webrpcVersion(value) {
    this._data['webrpcVersion'] = value
  }
  get schemaVersion() {
    return this._data['schemaVersion']
  }
  set schemaVersion(value) {
    this._data['schemaVersion'] = value
  }
  get schemaHash() {
    return this._data['schemaHash']
  }
  set schemaHash(value) {
    this._data['schemaHash'] = value
  }
  get appVersion() {
    return this._data['appVersion']
  }
  set appVersion(value) {
    this._data['appVersion'] = value
  }
  
  toJSON() {
    return this._data
  }
}

  
//
// Client
//

export class API {
  constructor(hostname, fetch) {
    this.path = '/rpc/API/'
    this.hostname = hostname
    this.fetch = fetch
  }

  url(name) {
    return this.hostname + this.path + name
  }
  
  ping = (headers) => {
    return this.fetch(
      this.url('Ping'),
      createHTTPRequest({}, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: (_data.status)
        }
      })
    })
  }
  
  version = (headers) => {
    return this.fetch(
      this.url('Version'),
      createHTTPRequest({}, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          version: new Version(_data.version)
        }
      })
    })
  }
  
}

  
const createHTTPRequest = (body = {}, headers = {}) => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res) => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status }
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}
